import os
import requests
import logging
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext, ConversationHandler, MessageHandler, Filters
from apscheduler.schedulers.background import BackgroundScheduler

# --- Konfiguration ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or "DEIN_TELEGRAM_BOT_TOKEN"
CHAT_ID = os.getenv("CHAT_ID") or "DEINE_CHAT_ID"
MIN_MARKET_CAP = 1000000  # Mindest-Marktkapitalisierung zum Filtern (1 Mio USD)

bot = Bot(token=TELEGRAM_TOKEN)

# --- Logging ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Speicher fÃ¼r bereits gesendete Token/Presales (Memory-Cache) ---
sent_tokens = set()
pending_confirmations = {}

# --- Funktionen zum Abrufen der Daten ---

def fetch_coingecko_new_listings():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        "vs_currency": "usd",
        "order": "market_cap_desc",
        "per_page": 50,
        "page": 1,
        "sparkline": False,
        "price_change_percentage": "24h"
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        # Neue Coins mit Market Cap > MIN_MARKET_CAP filtern und noch nicht gesendet
        new_coins = []
        for coin in data:
            if coin["market_cap"] and coin["market_cap"] > MIN_MARKET_CAP and coin["id"] not in sent_tokens:
                new_coins.append(coin)
        return new_coins
    except Exception as e:
        logger.error(f"Fehler bei CoinGecko API: {e}")
        return []

def fetch_dxsale_presales():
    url = "https://api.dx.sale/v1/presales"  # Beispiel-URL, je nach API-Dokumentation anpassen
    try:
        response = requests.get(url)
        response.raise_for_status()
        presales = response.json().get("data", [])
        new_presales = []
        for presale in presales:
            presale_id = presale.get("id")
            if presale_id and presale_id not in sent_tokens:
                new_presales.append(presale)
        return new_presales
    except Exception as e:
        logger.error(f"Fehler bei DxSale API: {e}")
        return []

# --- Telegram Bot Funktionen ---

def send_token_preview(token):
    text = (
        f"ðŸš€ Neuer Coin auf CoinGecko:\n"
        f"Name: {token['name']} ({token['symbol']})\n"
        f"Marktkapitalisierung: ${token['market_cap']:,}\n"
        f"Preis: ${token['current_price']}\n"
        f"Link: https://www.coingecko.com/en/coins/{token['id']}\n\n"
        f"Antwort mit /approve_{token['id']} um zu posten oder /reject_{token['id']} um zu ignorieren."
    )
    bot.send_message(chat_id=CHAT_ID, text=text)
    # Merke Token als ausstehend zur BestÃ¤tigung
    pending_confirmations[token['id']] = token

def send_presale_preview(presale):
    text = (
        f"ðŸ”¥ Neuer DxSale Presale:\n"
        f"Name: {presale.get('name')}\n"
        f"Soft Cap: {presale.get('soft_cap')}\n"
        f"Hard Cap: {presale.get('hard_cap')}\n"
        f"Startzeit: {presale.get('start_time')}\n"
        f"Link: {presale.get('link')}\n\n"
        f"Antwort mit /approve_presale_{presale.get('id')} um zu posten oder /reject_presale_{presale.get('id')} um zu ignorieren."
    )
    bot.send_message(chat_id=CHAT_ID, text=text)
    pending_confirmations[f"presale_{presale.get('id')}"] = presale

# --- Scheduler Job ---

def scheduled_check(context: CallbackContext):
    logger.info("Starte neue Abfrage...")

    # 1. CoinGecko Token check
    new_coins = fetch_coingecko_new_listings()
    for coin in new_coins:
        if coin['id'] not in sent_tokens:
            send_token_preview(coin)

    # 2. DxSale Presales check
    presales = fetch_dxsale_presales()
    for presale in presales:
        presale_key = f"presale_{presale.get('id')}"
        if presale_key not in sent_tokens:
            send_presale_preview(presale)

# --- Telegram Command Handler fÃ¼r Approval ---

def approve_token(update: Update, context: CallbackContext):
    msg = update.message.text
    token_id = msg.replace("/approve_", "").strip()
    token = pending_confirmations.get(token_id)
    if token:
        bot.send_message(chat_id=CHAT_ID, text=f"âœ… VerÃ¶ffentliche Coin: {token['name']} ({token['symbol']})\nhttps://www.coingecko.com/en/coins/{token_id}")
        sent_tokens.add(token_id)
        del pending_confirmations[token_id]
    else:
        update.message.reply_text("Token nicht gefunden oder schon verarbeitet.")

def reject_token(update: Update, context: CallbackContext):
    msg = update.message.text
    token_id = msg.replace("/reject_", "").strip()
    if token_id in pending_confirmations:
        del pending_confirmations[token_id]
        update.message.reply_text("Token verworfen.")
    else:
        update.message.reply_text("Token nicht gefunden oder schon verarbeitet.")

def approve_presale(update: Update, context: CallbackContext):
    msg = update.message.text
    presale_key = msg.replace("/approve_presale_", "").strip()
    presale = pending_confirmations.get(f"presale_{presale_key}")
    if presale:
        bot.send_message(chat_id=CHAT_ID, text=f"âœ… VerÃ¶ffentliche DxSale Presale: {presale.get('name')}\nLink: {presale.get('link')}")
        sent_tokens.add(f"presale_{presale_key}")
        del pending_confirmations[f"presale_{presale_key}"]
    else:
        update.message.reply_text("Presale nicht gefunden oder schon verarbeitet.")

def reject_presale(update: Update, context: CallbackContext):
    msg = update.message.text
    presale_key = msg.replace("/reject_presale_", "").strip()
    if f"presale_{presale_key}" in pending_confirmations:
        del pending_confirmations[f"presale_{presale_key}"]
        update.message.reply_text("Presale verworfen.")
    else:
        update.message.reply_text("Presale nicht gefunden oder schon verarbeitet.")

# --- Main Bot Setup ---

def main():
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    # Approval Command Handler (regex)
    dp.add_handler(CommandHandler("approve", approve_token, filters=Filters.regex(r"^/approve_\w+$")))
    dp.add_handler(CommandHandler("reject", reject_token, filters=Filters.regex(r"^/reject_\w+$")))
    dp.add_handler(CommandHandler("approve_presale", approve_presale, filters=Filters.regex(r"^/approve_presale_\w+$")))
    dp.add_handler(CommandHandler("reject_presale", reject_presale, filters=Filters.regex(r"^/reject_presale_\w+$")))

    # Scheduler alle 5 Minuten
    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: scheduled_check(dp), 'interval', minutes=5)
    scheduler.start()

    logger.info("Bot gestartet...")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
